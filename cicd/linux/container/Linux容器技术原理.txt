Linux 容器技术的两大技术Namespace 、Cgroups(Linux Controller group):
   1、Namespace 技术则是用来修改进程视图的主要方法。
        首先创建一个容器
        $ docker run -it busybox /bin/sh
        / # ps
        PID   USER     TIME  COMMAND
            1 root      0:00 /bin/sh
            6 root      0:00 ps
            可以看到，我们在 Docker 里最开始执行的 /bin/sh，就是这个容器内部的第 1 号进程（PID=1），而这个容器里一共只有两个进程在运行。
        可实际上，他们在宿主机的操作系统里，还是原来的第 100 号进程。这就是Linux 中的Namespace机制。
            它其实只是 Linux 创建新进程的一个可选参数。在 Linux 系统中创建线程的系统调用是 clone()，比如：
            int pid = clone(main_function, stack_size, SIGCHLD, NULL);
            当我们用 clone() 系统调用创建一个新进程时，就可以在参数中指定 CLONE_NEWPID 参数，比如：
            int pid = clone(main_function, stack_size, CLONE_NEWPID | SIGCHLD, NULL);
            新创建的这个进程将会“看到”一个全新的进程空间，在这个进程空间里，它的 PID 是 1。之所以说“看到”，是因为这只是一个"障眼法"
            除了上面的PID Namespace，Linux 操作系统还提供了 Mount、UTS、IPC、Network 和 User 这些 Namespace，用来对各种不同的进程上下文进行"障眼法"操作。

   2、Linux Cgroups 的全称是 Linux Control Group。它最主要的作用，就是限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等等。
        在 Linux 中，Cgroups 给用户暴露出来的操作接口是文件系统，即它以文件和目录的方式组织在操作系统的 /sys/fs/cgroup 路径下。
        $ mount -t cgroup
        ...
        cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,memory)
        cgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,net_prio,net_cls)
        cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,pids)
        cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,cpuacct,cpu)
        cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,cpuset)
        cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,blkio)
        ...
        对 CPU 子系统来说，我们就可以看到如下几个配置文件，这个指令是：
        $ ls /sys/fs/cgroup/cpu
        cgroup.clone_children  cgroup.procs          cpuacct.stat   cpuacct.usage_percpu  cpu.cfs_quota_us  cpu.rt_runtime_us  cpu.stat  notify_on_release  system.slice  user.slice
        cgroup.event_control   cgroup.sane_behavior  cpuacct.usage  cpu.cfs_period_us     cpu.rt_period_us  cpu.shares         docker    release_agent      tasks
        cfs_period 和 cfs_quota 这样的关键词。这两个参数需要组合使用，可以用来限制进程在长度为 cfs_period 的一段时间内，只能被分配到总量为 cfs_quota 的 CPU 时间。
        这样的配置文件又如何使用呢？
        你需要在对应的子系统下面创建一个目录，比如，我们现在进入 /sys/fs/cgroup/cpu 目录下：
        $ cd /sys/fs/cgroup/cpu
        $ mkdir container
        $ ls container
        cgroup.clone_children  cgroup.event_control  cgroup.procs  cpuacct.stat  cpuacct.usage  cpuacct.usage_percpu  cpu.cfs_period_us  cpu.cfs_quota_us  cpu.rt_period_us  cpu.rt_runtime_us  cpu.shares  cpu.stat  notify_on_release  tasks
        这里的container就是一个控制组，操作系统会在你新创建的 container 目录下，自动生成该子系统对应的资源限制文件。
        这时我们在后台执行一个脚本:
        $ while : ; do : ; done &
        [1] 1881
        $ top
        1847 root      20   0  115544    588    172 R 100.0  0.0   0:08.95 bash
        可以看到cpu被打满
        查看 container 目录下的文件，看到 container 控制组里的 CPU quota 还没有任何限制（即：-1），CPU period 则是默认的 100 ms（100000 us）：
        $ cat /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us
        -1
        $ cat /sys/fs/cgroup/cpu/container/cpu.cfs_period_us
         100000
        接下来，我们可以通过修改这些文件的内容来设置限制。
        向 container 组里的 cfs_quota 文件写入 20 ms（20000 us）：
        $ echo 20000 > /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us
        它意味着在每 100 ms 的时间里，被该控制组限制的进程只能使用 20 ms 的 CPU 时间，也就是说这个进程只能使用到 20% 的 CPU 带宽。
        接下来，我们把被限制的进程的 PID 写入 container 组里的 tasks 文件，上面的设置就会对该进程生效了：
        $ echo 1881 > /sys/fs/cgroup/cpu/container/tasks
        1881 root      20   0  115748    592    156 R  20.0  0.0   0:14.78 bash
        可以看到，计算机的 CPU 使用率立刻降到了 20%（%Cpu0 : 20.3 us）。
        除 CPU 子系统外，Cgroups 的每一项子系统都有其独有的资源限制能力，比如：
        blkio，为块设备I/O 限制，一般用于磁盘等设备；
        cpuset，为进程分配单独的 CPU 核和对应的内存节点；
        memory，为进程设定内存使用的限制。
        docker为每个容器创建一个控制组（即创建一个新目录），然后在启动容器进程之后，把这个进程的 PID 填写到对应控制组的 tasks 文件中就可以了。
        用户执行 docker run 时的参数指定了，比如这样一条命令：
        $ docker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash
        在启动这个容器后，我们可以通过查看 Cgroups 文件系统下，CPU 子系统中，“docker”这个控制组里的资源限制文件的内容来确认
        $ cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_period_us
        100000
        $ cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_quota_us
        20000
        查询到/sys/fs/cgroup/cpu目录 docker下面容器id相关信息
        $ cat /sys/fs/cgroup/cpu/docker/f0574a46a6641ba6247720820ae5c0ac960620aefc37cb25dbe9ae87989b5b3a/cpu.cfs_period_us
        100000
        $ cat /sys/fs/cgroup/cpu/docker/f0574a46a6641ba6247720820ae5c0ac960620aefc37cb25dbe9ae87989b5b3a/cpu.cfs_quota_us
        20000
        这就意味着这个 Docker 容器，只能使用到 20% 的 CPU 带宽。
        Linux 下的 /proc 目录存储的是记录当前内核运行状态的一系列特殊文件，用户可以通过访问这些文件，查看系统以及当前正在运行的进程的信息，
        比如 CPU 使用情况、内存占用率等，这些文件也是 top 指令查看系统信息的主要数据来源。如果在容器里执行 top 指令，就会发现，
        它显示的信息居然是宿主机的 CPU 和内存数据，而不是当前容器的数据。
        修复容器中的 top 指令以及 /proc 文件系统中的信息呢? lxcfs

   3、Namespace 示例演示、代码位置ns.c
        在 main 函数里，通过 clone() 系统调用创建了一个新的子进程 container_main，并且声明要为它启用 Mount Namespace（即：CLONE_NEWNS 标志）。
        子进程执行的，是一个“/bin/bash”程序，也就是一个 shell。所以这个 shell 就运行在了 Mount Namespace 的隔离环境中。
        编译代码:
        $ gcc -o ns ns.c
        $ ./ns
        Parent - start a container!
        Container - inside the container!
        这里我们就进入该程序模拟的容器 shell环境 进入/tmp目录后
        $ cd /tmp
        $ ls -l
        systemd-private-83abf19841fa442b826e558d83ea3214-chronyd.service-L56X7J
        这里说明开启了 Mount Namespace，容器进程看到的文件系统也跟宿主机完全一样。
        所以我们需要在创建进程的时候重新挂载/tmp目录:
        ns.c需要修改进程启动函数信息 : mount("none","/tmp","tmpfs",0,"")
        然后重新编译执行后查看就没有了/tmp
        $ gcc -o ns ns.c
        $ ./ns
        Parent - start a container!
        Container - inside the container!
        $ ls
        这个时候可以用mount命令查看tmpfs挂载的目录有哪些:
        $ mount -l | grep tmpfs
        ...
        none on /tmp type tmpfs (rw,relatime,seclabel)
        ...
        这里可以想到Mount Namespace 挂载的是宿主机的根目录，所以需要重新挂载整个根目录，所以这里就有一个Linux下的命令chroot
        (change root file system)可以将某一个目录改变成为根目录的作用,测试流程如下:
        $ mkdir -p $HOME/testRootFs
        $ mkdir -p $HOME/testRootFs/{bin,lib64,lib}
        把 bash 命令拷贝到 testRootFs 目录对应的 bin 路径下
        $ cp -v /bin/{bash,ls} $HOME/testRootFs/bin
        把 bash 命令需要的所有 so 文件，也拷贝到 testRootFs 目录对应的 lib 路径下。找到 so 文件可以用 ldd 命令:
        $ T=$HOME/testRootFs
        $ echo $T
        $ list="$(ldd /bin/ls | egrep -o '/lib*.*\.[0-9]')"
        $ echo $list
        $ for i in $list ; do cp -v "$i" "$T$i" ; done
        最后执行chroot指令，将$HOME/testRootFs 设置为根目录
        $ chroot $HOME/testRootFs /bin/bash
        如果抛出so文件找不到就find该文件的位置，将其copy到对应的lib目录就行
        bash-4.2# ./bin/ls .
        bin  lib  lib64
        这里就可以看到是挂载的当前设置的目录为根目录，所以有了chroot命令，它其实改善了Mount Namespace的问题，我们可以在
        某个目录中装载操作系统的所有文件就可以模拟一个完整的操作系统。这里所谓的容器镜像其实就是一个rootfs(根文件系统)。
        一个常见的rootfs通常包含下面几个目录:
        $ docker run -it busybox /bin/sh
        / # ls
        bin   dev   etc   home  proc  root  sys   tmp   usr   var
        总结: Docker 项目核心原理就是给用户创建一个特定进程(设置Namespace、cgroups、联合文件系统(AUfs))
        1、启用 Linux Namespace 配置；
        2、设置指定的 Cgroups 参数；
        3、切换进程的根目录（Change Root）。
        Docker 项目在最后一步的切换上会优先使用 pivot_root 系统调用，如果系统不支持，才会使用 chroot。
        chroot 只包含操作系统的文件、配置、目录等信息，不包含内核，内核还是和宿主机同用一个。
   4、Docker镜像设计
    Docker 在镜像的设计中，引入了层（layer）的概念。也就是说，用户制作镜像的每一步操作，都会生成一个层，也就是一个增量 rootfs。
    这里利用到了一个叫做联合文件系统(Union File System)，其主要的功能就是将不同位置的目录挂载(mount)到同一个目录中,示例如下:
    目前的目录结构如下: 需要将A、B目录挂载到C目录中
    .
    ├── A
    │   ├── a.txt
    │   └── x.txt
    ├── B
    │   ├── b.txt
    │   └── x.txt
    └── C
    $ mount -t aufs -o dirs=./A:./B none ./C
        mount: 未知的文件系统类型“aufs”
        这个时候可以查看当前操作系统支持的文件系统类型
        $ cat /proc/filesystems
        nodev	sysfs
        nodev	rootfs
        nodev	ramfs
        nodev	bdev
        nodev	proc
        nodev	cgroup
        nodev	cpuset
        nodev	tmpfs
        nodev	devtmpfs
        nodev	debugfs
        nodev	securityfs
        nodev	sockfs
        nodev	dax
        nodev	bpf
        nodev	pipefs
        nodev	configfs
        nodev	devpts
        nodev	hugetlbfs
        nodev	autofs
        nodev	pstore
        nodev	mqueue
        nodev	selinuxfs
            xfs
        nodev	overlay
        nodev	binfmt_misc
        可以看到没有aufs，需要自己安装aufs
         进入repo目录
        $ cd /etc/yum.repos.d
         下载文件
        $ wget https://yum.spaceduck.org/kernel-ml-aufs/kernel-ml-aufs.repo
         安装
        $ yum install kernel-ml-aufs -y

        $ vi /etc/default/grub
        # 修改参数, 表示启动时选择第一个内核
        ###################################
        GRUB_DEFAULT=0
        ###################################
        GRUB_DEFAULT为saved，saved表示下次启动时默认启动上次的内核，这里我们需要更改GRUB_DEFAULT=0, 表示启动时选择第一个内核

         重新生成grub.cfg
        $ grub2-mkconfig -o /boot/grub2/grub.cfg

         重启计算机
        $ reboot

        再次查看文件系统支持的类型
        $ cat /proc/filesystems
        nodev	sysfs
        nodev	tmpfs
        nodev	bdev
        nodev	proc
        nodev	cgroup
        nodev	cgroup2
        nodev	cpuset
        nodev	devtmpfs
        nodev	configfs
        nodev	debugfs
        nodev	tracefs
        nodev	securityfs
        nodev	sockfs
        nodev	pipefs
        nodev	ramfs
        nodev	hugetlbfs
        nodev	devpts
        nodev	autofs
        nodev	aufs     --这里存在了
        nodev	mqueue
        nodev	selinuxfs
        nodev	pstore
            xfs
        nodev	overlay
    $ mount -t aufs -o dirs=./A:./B none ./C
    mount: 文件系统类型错误、选项错误、none 上有坏超级块、
           缺少代码页或助手程序，或其他错误

           有些情况下在 syslog 中可以找到一些有用信息- 请尝试
           dmesg | tail  这样的命令看看。
    -- xino doesn't support /tmp/.aufs.xino(xfs)
    如果还存在问题可以查看https://lists.debian.org/debian-live/2009/12/msg00173.html
    $ mount -t aufs -o noxino,noatime,dirs=./A:./B none ./C
    可以看出其中x.txt 内容为A目录中的x.txt内容，它就是一个从上向下查询，查询到了就使用该文件，所有上层的内容可以覆盖下层的内容。

    docker使用 AUFS 存在的路径/var/lib/docker/aufs/diff/<layer_id>
    $ docker image inspect ubuntu:latest
    ...
    "RootFS": {
        "Type": "layers",
        "Layers": [
            "sha256:2ce3c188c38d7ad46d2df5e6af7e7aed846bc3321bdd89706d5262fefd6a3390",
            "sha256:ad44aa179b334bbf4aeb61ecef978c3c77a3bb27cb28bcb727f5566d7f085b31",
            "sha256:35a91a75d24be7ff9c68ce618dcc933f89fef502a59becac8510dbc3bf7a4a05",
            "sha256:a4399aeb9a0e1ddf9da712ef222fd66f707a8c7205ed2607c9c8aac0dbabe882"
        ]
    }
    ...
    总共有四层
    这个信息记录在 AuFS 的系统目录 /sys/fs/aufs 下面。
    /var/lib/docker/aufs/diff/6e3be5d2ecccae7cc...=rw
    /var/lib/docker/aufs/diff/6e3be5d2ecccae7cc...-init=ro+wh
    /var/lib/docker/aufs/diff/32e8e20064858c0f2...=ro+wh
    /var/lib/docker/aufs/diff/2b8858809bce62e62...=ro+wh
    /var/lib/docker/aufs/diff/20707dce8efc0d267...=ro+wh
    /var/lib/docker/aufs/diff/72b0744e06247c7d0...=ro+wh
    /var/lib/docker/aufs/diff/a524a729adadedb90...=ro+wh
    ubuntu 上面的分层信息是:
        容器层-rw(读写): 这里就是rootfs增量信息存在的地方，这里就是删除文件，比如要删除一个a文件就会存在一个叫 .wh.a 的文件
        init ro+wh(只读+whiteout): Init 层是 Docker 项目单独生成的一个内部层，专门用来存放 /etc/hosts、/etc/resolv.conf 等信息。
        镜像层-ro+wh(只读+whiteout): 不可被修改的
    通过上面几层信息可以构建一个完成的unbuntu镜像，每一层就是一个layer(就是一个rootfs)，最后通过union fs构建在一起。组成一个完整的镜像。

    查看AUfs挂载记录的位置
    $ cat /proc/mounts | grep aufs
    none /root/unionfs/C aufs rw,noatime,si=a146650fe3705c31,noxino 0 0
    找到si=a146650fe3705c31这个信息，用这个si值去/sys/fs/aufs就可以查询到对应的信息
    $ cat /sys/fs/aufs/si_a146650fe3705c31/br[0-9]*
    /root/unionfs/A=rw
    /root/unionfs/B=ro
    容器部署的项目依赖Linux 内核版本那么这个就不能够跨平台

   5、Docker 项目另一个重要的内容：Volume（数据卷）
    解决的问题: Volume 机制，允许你将宿主机上指定的目录或者文件，挂载到容器里面进行读取和修改操作。
    docker 提供两种将宿主机目录挂载到容器目录(/demo)中:
        $ docker run -v /demo ...
        $ docker run -v /home:/demo ...
        在第一种情况下，由于你并没有显示声明宿主机目录，那么 Docker 就会默认在宿主机上创建一个临时目录 /var/lib/docker/volumes/[VOLUME_ID]/_data，
        然后把它挂载到容器的 /demo 目录上。而在第二种情况下，Docker 就直接把宿主机的 /home 目录挂载到容器的 /demo 目录上。
    docker 如何做到将宿主机文件目录加载到容器目录？
            需要在 rootfs 准备好之后，在执行 chroot 之前，把 Volume 指定的宿主机目录（比如 /home 目录），
        挂载到指定的容器目录（比如 /demo 目录）在宿主机上对应的目录（即 /var/lib/docker/aufs/mnt/[可读写层 ID]/demo）上，
        这个 Volume 的挂载工作就完成了。
            这里要使用到的挂载技术，就是 Linux 的绑定挂载（bind mount）机制。它的主要作用就是，允许你将一个目录或者文件，
        而不是整个设备，挂载到一个指定的目录上。并且，这时你在该挂载点上进行的任何操作，只是发生在被挂载的目录或者文件上，
        而原挂载点的内容则会被隐藏起来且不受影响。
        测试流程如下:
            $ docker run -d -v /demo busybox sleep 3600
            2dcfca602af6de77ea1e192acf98ba28b427e26acbef5e4f59c726bb90736d77
            $ docker volume ls
            DRIVER              VOLUME NAME
            local               fa51af4057b5caa29c35c797ab420f3c53c02b9939f4a4630425749d9b25dec4
            使用上面的ID找到挂载的路径
            $ ls /var/lib/docker/volumes/fa51af4057b5caa29c35c797ab420f3c53c02b9939f4a4630425749d9b25dec4/_data/
            在容器中/demo目录添加一个文件信息
            $ docker exec -it 2dcf /bin/sh
            / # cd demo/
            /demo # touch lcy.txt
            $ ls /var/lib/docker/volumes/fa51af4057b5caa29c35c797ab420f3c53c02b9939f4a4630425749d9b25dec4/_data/
            lcy.txt
            查看docker容器可读可写层的数据
            $ ll /var/lib/docker/overlay2/f1b8dc77e7748588dbb8e1eff0e8a48d3ad3a4b31d708b46074bf00e651921d6/diff/demo
            该目录下没有任何东西，说明容器中的demo目录不存在任何修改，只是宿主机中的目录存在两个文件，所以docker commit 也不会提交到挂载的目录信息

   6、docker容器技术的主要两个层面
        1、一组联合挂载在 /var/lib/docker/aufs/mnt 上的 rootfs，这一部分我们称为“容器镜像”（Container Image），是容器的静态视图；
        2、一个由 Namespace+Cgroups 构成的隔离环境，这一部分我们称为“容器运行时”（Container Runtime），是容器的动态视图。



























