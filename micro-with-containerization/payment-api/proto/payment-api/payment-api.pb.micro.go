// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/payment-api/payment-api.proto

package paymentapi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PaymentApi service

func NewPaymentApiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PaymentApi service

type PaymentApiService interface {
	// 直接退款功能
	PayPalRefund(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type paymentApiService struct {
	c    client.Client
	name string
}

func NewPaymentApiService(name string, c client.Client) PaymentApiService {
	return &paymentApiService{
		c:    c,
		name: name,
	}
}

func (c *paymentApiService) PayPalRefund(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PaymentApi.PayPalRefund", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentApi service

type PaymentApiHandler interface {
	// 直接退款功能
	PayPalRefund(context.Context, *Request, *Response) error
}

func RegisterPaymentApiHandler(s server.Server, hdlr PaymentApiHandler, opts ...server.HandlerOption) error {
	type paymentApi interface {
		PayPalRefund(ctx context.Context, in *Request, out *Response) error
	}
	type PaymentApi struct {
		paymentApi
	}
	h := &paymentApiHandler{hdlr}
	return s.Handle(s.NewHandler(&PaymentApi{h}, opts...))
}

type paymentApiHandler struct {
	PaymentApiHandler
}

func (h *paymentApiHandler) PayPalRefund(ctx context.Context, in *Request, out *Response) error {
	return h.PaymentApiHandler.PayPalRefund(ctx, in, out)
}
