syntax = "proto3";
package grpc.gateway.service.v1;
option go_package = "grpc/gateway/service/v1";

import "google/api/annotations.proto";
import "grpc-gateway/protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Echo API";
    version: "1.0";
    description: "";
    contact: {
      name: "gRPC-Gateway project";
      url: "https://github.com/grpc-ecosystem/grpc-gateway";
      email: "none@example.com";
    };
    license: {
      name: "BSD 3-Clause License";
      url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE";
    };
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

message StringMessage {
  string value = 1;
}

service GrpcGateway {
  //rpc Echo(StringMessage) returns (StringMessage) {}
  rpc Echo(StringMessage) returns (StringMessage) {
    option (google.api.http) = {
      post: "/echo/service/v1/example/echo"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a message.";
      operation_id: "getMessage";
      tags: "echo";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };
  }
}

/**
https://github.com/fullstorydev/grpcurl
https://github.com/grpc-ecosystem/grpc-gateway

protoc -I . \
    --go_out . --go_opt paths=source_relative \
    --go-grpc_out . --go-grpc_opt paths=source_relative \
    gen/go/grpc_gateway.proto

protoc -I . --grpc-gateway_out . \
    --grpc-gateway_opt paths=source_relative \
    --grpc-gateway_opt generate_unbound_methods=true \
    gen/go/grpc_gateway.proto

protoc -I . --openapiv2_out . gen/go/grpc_gateway.proto

 */